Tema 2 Protocoale de Comunicatii - 323 CA Constantinescu Radu

	In cadrul acestei teme am implementat un server care se ocupa cu gestiunea mesajelor unor clienti UDP si trimiterea mesajelor catre toti abonatii topicului respectiv. Am implementat in tema atat clientul TCP (cel care primeste mesajele), cat si serverul(cel care se ocupoa de intreaga gestiune). Voi descrie pe rand fiecare fisier.

Server.cpp

	Cu ajutorul scheletului din laboratorul 7, din care am extras mainul (initializarea serverului si a socketului pe car se vor conecta clientii tcp, dar si functia care initializeaza pollul de evenimente -> conectarea unui nou client, primire mesaj udp si trimitere, deconectare clienti). Initializez inainte de toate serverul si socketurile aferente pentru primirea de UDP/TCP, dupa care le binduiesc pe server. Imi voi crea un poll in care voi pune de la bun inceput evenimentele: scirere de la tastatura, primire de conexiune noua pe client TCP (litenfd) , si pe UDP (udpfd). Dupa aceea astept sa primesc evenimente. Primul caz tratat este cel in care primesc comenzi de la tastatura. Singura comanda fiind exit, am un singur caz in care inchid intai toate socketurile din poll iar apoi inchid socketurile din server. Pentru ca acest caz nu depinde neaparat de utilizator, il voi face in afara forului care itereaza ptin toate elementele pollului. Fac forul cu care itezez prin toti membrii pollului. 
		1.Intru pe cazul in care un nou client se conecteaza la server, erific daca un client cu acelasi id este deja conectat. Daca da, refuz conexiunea si trec mai departe. Daca clientul "are cont"(s-a conectat in trecut, dar acum nu este activ), sau daca este prima conectare, accept conexiune. Retin intr-un vector de structuri client noul client. Structura de client contine: id, file descriptor, status, addresa si topicurile la care este abonat. 
		2.Intru pe cazul in care ma conectez la un client udp. Primesc un pachet de tip packet care contine: topic, type si continut, si il trimit catre un client tcp care este abonat sau care un abonament cu wildcar la acest topic(daca are * inseamna ca acolo poate fi orice, iar daca avem + inseamna ca se sare o singura rubrica despartita de "/")
		3.Intru pe cazul in care un user tcp trimite mesaje catre server. Daca trimite mesajul "subscribetopic" se va abona la topicul topic, in cazul in cre primeste "unsubscribetopic", sevrerul va dezabona userul tcp de la topciul respectiv. Ultimul caz este cel in care se primesc 0 bytes (adicaa userul de deconecteaza). In acest caz userul se pune doar pe off, pentru o eventuala reconectare.

Subscribe.cpp
	Aici fac clientul TCP, impruena cu toate functionalitatile sale. Din laboratorul 7, am pastrat initializarea clientului (initializarea socketurilor, conecatrea clientului la server), la care se adauga trimiterea idiului, sub forma de string, catre server. Am mai pastrat si functia de gestiune a mesajelor. Si aici am implementat un poll cu doua evenimente, unul dintre ele fiind primier de date, si celalalta fiind trmiterea de date.
		1.Primire de date: Aici este cazul in care primesc un packet de la server(pachet de la udp). Urmeaza sa gestionez mesajul. Stiu ca am primit un topic, care este string, un type care imi indica ce fel de date avem, si datele efective. Daca primesc un strng, il afisez ca atare, deoarecesi datele sunt de tip string. Daca primesc un int, primul byte reprezinta semnul, iar urmatorii patru sunt numarul, fel se intampla si la float doar ca la final se mai primese o putere a lui 10 la care trebuie impartit numarul primit. Daca primesc un short voi primii un short, primii doi bytes din payload reprezinta numarul meu, pe care trebuie sa il impart la 100. Apoi afisez mesajul dupa tiparul cerut.
		2. Trimitere de date: Pe acest caz se trimite o comanda catre server. Daca comanda este exit, se inchide socketul clientului, si de asemenea se trimit 0 bytes pentru a notifica serverul ca s-a inchis. Daca comanda primita este subscribe se afiseaza mesajul in client, se concateneaz a subscribe cu topicul si se trimite catre server, analog pentru unsubscribe.

**Mentionez inca o data ca in realizarea aceste teme am folosit laboratorul 7.
 